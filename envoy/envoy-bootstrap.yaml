apiVersion: v1
kind: ConfigMap
metadata:
  name: envoy-config
  namespace: envoy-gw
data:
  envoy.yaml: |
    static_resources:
      secrets:
      - name: oidc-client-secret
        generic_secret:
          secret:
            filename: /etc/envoy/oidc-oauth/client_secret

      listeners:
      - name: listener_https
        address: { socket_address: { address: 0.0.0.0, port_value: 8443 } }
        filter_chains:
        - filters:
          - name: envoy.filters.network.http_connection_manager
            typed_config:
              "@type": type.googleapis.com/envoy.extensions.filters.network.http_connection_manager.v3.HttpConnectionManager
              stat_prefix: ingress_http
              codec_type: AUTO
              common_http_protocol_options: { idle_timeout: 3600s }
              upgrade_configs: [{ upgrade_type: websocket }]
              route_config:
                name: local_route
                virtual_hosts:
                - name: kube
                  domains: ["*"]
                  routes:
                  - match: { prefix: "/" }
                    route: { cluster: kubeapi, timeout: 0s }
              http_filters:
              - name: envoy.filters.http.oauth2
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.oauth2.v3.OAuth2
                  config:
                    authorization_endpoint: "https://sso.neeranuchj.org/realms/k8s-realm/protocol/openid-connect/auth"
                    token_endpoint:
                      uri: "https://sso.neeranuchj.org/realms/k8s-realm/protocol/openid-connect/token"
                      cluster: oidc
                      timeout: 5s
                    redirect_uri: "https://$REQUEST_AUTHORITY/oauth2/callback"
                    redirect_path_matcher: { path: { exact: "/oauth2/callback" } }
                    signout_path:         { path: { exact: "/oauth2/logout"   } }
                    use_refresh_token: true
                    forward_bearer_token: true
                    auth_scopes: ["openid","profile","email","groups"]
                    credentials:
                      client_id: "k8s-client"
                      token_secret:
                        name: oidc-client-secret

              - name: envoy.filters.http.jwt_authn
                typed_config:
                  "@type": type.googleapis.com/envoy.extensions.filters.http.jwt_authn.v3.JwtAuthentication
                  providers:
                    kc:
                      issuer: "https://sso.neeranuchj.org/realms/k8s-realm"
                      remote_jwks:
                        http_uri:
                          uri: "https://sso.neeranuchj.org/realms/k8s-realm/protocol/openid-connect/certs"
                          cluster: oidc
                          timeout: 5s
                        cache_duration: 600s
                      forward: true
                      from_headers:
                      - name: Authorization
                        value_prefix: "Bearer "
                  rules:
                  - match: { prefix: "/" }
                    requires: { provider_name: kc }
